import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as t,c as n,a as e,b as o,d as c,e as r}from"./app-05cf074e.js";const i={},s=e("p",null,"很多时候我们会看到一个大图是由很多很多重复出现的小图平铺而成的，就像我们人行道上的砖块，每一个砖块就是一个重复单元，然后很多砖块一起铺成人行道，于是每个砖块就可能是一个最小重复单元（具体情况得看每个砖块上的图形）。于是情况是这样的，给你一张很大的图，找出这个图片最小的那个重复单元，如果没有那整个大图就是一个最小重复单元。",-1),B=e("h3",{id:"为什么要找最小重复单元",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么要找最小重复单元","aria-hidden":"true"},"#"),o(" 为什么要找最小重复单元")],-1),A=e("p",null,"前端开发中，我们都知道如果一个背景是由一个小图平铺而成，那么我们不用使用一张完整的大图而是只需要用这个小图进行平铺就好，这样就节省了网路的流量开销，同时也加快页面加载速度，这个没什么好说的。",-1),l=e("p",null,"问题在于，设计给设计稿时，如果这个背景图是由一个小图平铺而成的，他是不会给你这个最小重复单元的图的（或是没想到或者不知道），于是在切图的时候就需要截取这个最小重复单元，有些图很容易用肉眼看出来哪个是最小重复单元，然后用PS随便截取一个就好了，但是就是有那么些图肉眼看就没那么轻松，又觉得不好去麻烦设计给这个最小重复单元的图，于是就想自己来做一个可以自动寻找到这个最小重复单元的小程序。",-1),h=e("h3",{id:"怎样找图片最小重复单元",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#怎样找图片最小重复单元","aria-hidden":"true"},"#"),o(" 怎样找图片最小重复单元")],-1),_=e("p",null,"HTML5的新标准，引入了canvas画布功能，具体不再多说。",-1),m={href:"http://www.w3school.com.cn/tags/canvas_getimagedata.asp",target:"_blank",rel:"noopener noreferrer"},u=r('<p>在开始之前，先确定一个思想，就是所给的图片既然是以一个小图平铺的，那么这个最小重复单元是有很多种情况的，但是只要我们确定了这个最小重复单元的长和宽就可以了。</p><figure><img src="https://image-1257141638.cos.ap-guangzhou.myqcloud.com/post/mini-repeat-01.jpg" alt="demo" tabindex="0" loading="lazy"><figcaption>demo</figcaption></figure><p></p><p>如上图所示，A、B、C中每个绿色小方块都可以是最小重复单元，所以不局限是图A那种。于是这样就可以不用在意每个重复单元的起点，所以我们就可以方便的以大图的左上角为第一个最小重复单元的起始位置，剩下的只要确定这个最小重复单元的长和宽就可以了。</p><h3 id="如何确定长和宽" tabindex="-1"><a class="header-anchor" href="#如何确定长和宽" aria-hidden="true">#</a> 如何确定长和宽</h3><p>我们把问题再细分，找到最小重复单元其实可以假设这个大图的高是一像素，然后宽是任意，于是这就变成了在一维数组中寻找最小重复项，问题就变得简单多了。</p><p>具体的算法，我的思路是遍历原数组A，然后最小重复单元用数组B存放，先将A中的第一个元素放入B中，然后B依次和A中后面的元素比较，当遇到不匹配时，则对B中的元素进行一次调整。这里的调整分两种情况：</p><ol><li>当B与A之后的元素完全匹配1次或1次以上后遇到不同的，则新的B数组是从A数组的0位置开始到当前A中不匹配元素位置止。</li><li>当B与A之后的元素没能完全匹配1次，则新的B数组是按在A中的顺序向后增加一个元素。</li></ol><p>具体如下说明：</p><p>对于情况一：</p><p>假设A数组是<code>A=[1,1,1,2,1,1,1,2,1,1,1,2,1,1,1]</code>，那么当循环开始的时候B数组中是A数组中的第一个元素，即<code>B=[1]</code>。然后依次和A中后面的元素比较：</p><p><code>A[1]==B[0]</code>（一次完全匹配）</p><p><code>A[2]==B[0]</code>（一次完全匹配）</p><p><code>A[3]!=B[0]</code>（匹配失败）</p><p>此时匹配失败，那么此时B和A中的元素已经完全匹配了2次，于是此时将B数组修改为从0开始到A数中中当前不匹配的元素的位置，即B=[1,1,1,2]，再一次往后匹配：</p><p><code>A[4]==B[0]</code></p><p><code>A[5]==B[1]</code></p><p><code>A[6]==B[2]</code></p><p><code>A[7]==B[3]</code>（一次完全匹配）</p><p><code>A[8]==B[0]</code></p><p><code>A[9]==B[1]</code></p><p><code>A[10]==B[2]</code></p><p><code>A[11]==B[3]</code>（一次完全匹配）</p><p>以此类推</p><p>对于情况二：</p><p>假设A数组是A=[2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2]，那么当循环开始的时候B=[2]，依次和A后面元素比较：</p><p><code>A[1]==B[0]</code>（一次完全匹配）</p><p><code>A[2]!=B[0]</code>（匹配失败）</p><p>此时已经完全匹配过一次，于是B=[2,2,1]，再依次向后匹配：</p><p><code>A[3]==B[0]</code></p><p><code>A[4]==B[1]</code></p><p><code>A[5]!=B[2]</code>（匹配失败）</p><p>此时还未进行一次完全匹配，于是现在将B修改为按A的顺序向后增加一个元素。即B=[2,2,1,2]（而不是修改为从0开始到A数中中当前不匹配的元素的位置B=[2,2,1,2,2,2]）。然后从所增加的这个元素后一位开始匹配：</p><p><code>A[4]==B[0]</code></p><p><code>A[5]==B[1]</code></p><p><code>A[6]==B[2]</code></p><p><code>A[7]==B[3]</code>（一次完全匹配）</p><p><code>A[8]==B[0]</code></p><p><code>A[9]==B[1]</code></p><p><code>A[10]==B[2]</code></p><p><code>A[11]==B[3]</code>（一次完全匹配）</p><p>依此类推</p><p>这样就可以找到在一个数组中最小的重复单元，即全部都可以完全匹配时的数组B，至于这个算法是不是高效的，就没有深入研究了，如果你有兴趣可以帮忙看看。</p><p>然后再应用到二维数组中，其实可以完全看成一个一维数组，只不过这个数组中所存放的元素是数组，要进行比较的也就变成数组的比较了，这样就可以确定这个二维数组的最小重复单元的宽了，然后同样的再以高的方向遍历一遍，也就可以得出最小重复单元的高了。</p><p>大致的思路就是如此。</p>',45),g={href:"https://stplayproject.github.io/phpSub/demo/min-repeat/",target:"_blank",rel:"noopener noreferrer"};function f(x,b){const p=a("ExternalLinkIcon");return t(),n("div",null,[s,B,A,l,h,_,e("p",null,[o("浏览器的canvas画布功能提供了一个方法"),e("a",m,[o("getImageData()"),c(p)]),o("，这个方法是返回当前画布的像素信息，即每个像素点的RGBA值，然后我们可以将这4个值用16进制的字符拼接成一个字符串，就可以唯一标识该像素点，然后将画布的每个像素映射到一个二维数组中，于是我们就可以将寻找图片最小重复单元转化成寻找一个二维数组的最小重复单元。")]),u,e("p",null,[o("具体代码实现demo："),e("a",g,[o("Demo"),c(p)])])])}const w=d(i,[["render",f],["__file","2016-11-20-image-min-repeat.html.vue"]]);export{w as default};
